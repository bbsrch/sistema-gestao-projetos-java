package conexaodb;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import conexaodb.Conexao;
import model.DesempenhoColaborador;
import model.Projeto;
import model.Tarefa;
import model.Usuario;

public class TarefaDAO {

    /**
     * Cadastra uma nova tarefa no banco de dados.
     */
    public void cadastrar(Tarefa tarefa) {
        String sql = "INSERT INTO TAREFAS (titulo, descricao, status, data_inicio_prevista, data_fim_prevista, " +
                     "data_inicio_real, data_fim_real, id_projeto, id_responsavel) " +
                     "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)";

        try (Connection conexao = new Conexao().getConexao();
             PreparedStatement stmt = conexao.prepareStatement(sql)) {

            stmt.setString(1, tarefa.getTitulo());
            stmt.setString(2, tarefa.getDescricao());
            stmt.setString(3, tarefa.getStatus());
            stmt.setDate(4, tarefa.getDataInicioPrevista());
            stmt.setDate(5, tarefa.getDataFimPrevista());
            stmt.setDate(6, tarefa.getDataInicioReal());
            stmt.setDate(7, tarefa.getDataFimReal());
            stmt.setInt(8, tarefa.getProjeto().getId()); // Pega o ID do objeto Projeto
            stmt.setInt(9, tarefa.getResponsavel().getId()); // Pega o ID do objeto Usuario (Responsável)

            stmt.execute();
            System.out.println("Tarefa cadastrada com sucesso!");

        } catch (SQLException e) {
            System.out.println("Erro ao cadastrar tarefa: " + e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * Lista todas as tarefas, trazendo os dados completos do projeto e do responsável.
     * USA UM JOIN DUPLO PARA CONECTAR 3 TABELAS!
     */
    public List<Tarefa> listarTodos() {
        List<Tarefa> tarefas = new ArrayList<>();
        String sql = "SELECT " +
                     "    t.*, " +
                     "    p.nome_projeto, " +
                     "    u.nome_completo as nome_responsavel " +
                     "FROM " +
                     "    tarefas t " +
                     "JOIN projetos p ON t.id_projeto = p.id_projeto " +
                     "JOIN usuarios u ON t.id_responsavel = u.id_usuario";

        try (Connection conexao = new Conexao().getConexao();
             PreparedStatement stmt = conexao.prepareStatement(sql);
             ResultSet rs = stmt.executeQuery()) {

            while (rs.next()) {
                // 1. Criar os objetos "aninhados" (Projeto e Responsável)
                Projeto projeto = new Projeto();
                projeto.setId(rs.getInt("id_projeto"));
                projeto.setNome(rs.getString("nome_projeto"));
                
                Usuario responsavel = new Usuario();
                responsavel.setId(rs.getInt("id_responsavel"));
                responsavel.setNomeCompleto(rs.getString("nome_responsavel"));

                // 2. Criar o objeto Tarefa principal
                Tarefa tarefa = new Tarefa();
                tarefa.setId(rs.getInt("id_tarefa"));
                tarefa.setTitulo(rs.getString("titulo"));
                tarefa.setDescricao(rs.getString("descricao"));
                tarefa.setStatus(rs.getString("status"));
                tarefa.setDataInicioPrevista(rs.getDate("data_inicio_prevista"));
                tarefa.setDataFimPrevista(rs.getDate("data_fim_prevista"));
                // As datas reais podem ser nulas, então é bom verificar
                tarefa.setDataInicioReal(rs.getDate("data_inicio_real"));
                tarefa.setDataFimReal(rs.getDate("data_fim_real"));

                // 3. Conectar os objetos
                tarefa.setProjeto(projeto);
                tarefa.setResponsavel(responsavel);

                tarefas.add(tarefa);
            }
        } catch (SQLException e) {
            System.out.println("Erro ao listar tarefas: " + e.getMessage());
            e.printStackTrace();
        }
        return tarefas;
    }
    
    /**
     * Atualiza uma tarefa existente no banco de dados.
     */
    public void atualizar(Tarefa tarefa) {
        String sql = "UPDATE TAREFAS SET titulo = ?, descricao = ?, status = ?, data_inicio_prevista = ?, " +
                     "data_fim_prevista = ?, data_inicio_real = ?, data_fim_real = ?, id_projeto = ?, " +
                     "id_responsavel = ? WHERE id_tarefa = ?";

        try (Connection conexao = new Conexao().getConexao();
             PreparedStatement stmt = conexao.prepareStatement(sql)) {

            stmt.setString(1, tarefa.getTitulo());
            stmt.setString(2, tarefa.getDescricao());
            stmt.setString(3, tarefa.getStatus());
            stmt.setDate(4, tarefa.getDataInicioPrevista());
            stmt.setDate(5, tarefa.getDataFimPrevista());
            stmt.setDate(6, tarefa.getDataInicioReal());
            stmt.setDate(7, tarefa.getDataFimReal());
            stmt.setInt(8, tarefa.getProjeto().getId());
            stmt.setInt(9, tarefa.getResponsavel().getId());
            stmt.setInt(10, tarefa.getId()); // ID da tarefa para o WHERE

            stmt.executeUpdate();
            System.out.println("Tarefa atualizada com sucesso!");

        } catch (SQLException e) {
            System.out.println("Erro ao atualizar tarefa: " + e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * Deleta uma tarefa pelo seu ID.
     */
    public void deletar(int id) {
        String sql = "DELETE FROM TAREFAS WHERE id_tarefa = ?";
        try (Connection conexao = new Conexao().getConexao();
             PreparedStatement stmt = conexao.prepareStatement(sql)) {
            stmt.setInt(1, id);
            stmt.executeUpdate();
            System.out.println("Tarefa deletada com sucesso!");
        } catch (SQLException e) {
            System.out.println("Erro ao deletar tarefa: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
 // Dentro da classe TarefaDAO.java

    /**
     * Gera um relatório de desempenho para cada colaborador.
     * Conta o total de tarefas atribuídas e o total de tarefas concluídas.
     * @return Uma lista com os dados de desempenho de cada colaborador.
     */
    public List<DesempenhoColaborador> gerarRelatorioDesempenho() {
        List<DesempenhoColaborador> relatorio = new ArrayList<>();
        // Este SQL é o mais avançado. Ele junta tarefas e usuários, agrupa por usuário,
        // e faz duas contagens diferentes para cada um.
        String sql = "SELECT " +
                     "    u.nome_completo, " +
                     "    COUNT(t.id_tarefa) as total_atribuido, " +
                     "    SUM(CASE WHEN t.status = 'concluída' THEN 1 ELSE 0 END) as total_concluido " +
                     "FROM " +
                     "    usuarios u " +
                     "LEFT JOIN tarefas t ON u.id_usuario = t.id_responsavel " +
                     "GROUP BY " +
                     "    u.id_usuario, u.nome_completo " +
                     "ORDER BY " +
                     "    u.nome_completo";

        try (Connection conexao = new Conexao().getConexao();
             PreparedStatement stmt = conexao.prepareStatement(sql);
             ResultSet rs = stmt.executeQuery()) {

            while (rs.next()) {
                DesempenhoColaborador desempenho = new DesempenhoColaborador();
                desempenho.setNomeColaborador(rs.getString("nome_completo"));
                desempenho.setTotalTarefasAtribuidas(rs.getInt("total_atribuido"));
                desempenho.setTarefasConcluidas(rs.getInt("total_concluido"));
                relatorio.add(desempenho);
            }

        } catch (SQLException e) {
            System.out.println("Erro ao gerar relatório de desempenho: " + e.getMessage());
            e.printStackTrace();
        }
        return relatorio;
    }
}