package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import model.Equipe;
import util.Conexao;

public class AlocacaoDAO {

    public List<Equipe> buscarEquipesPorProjeto(int idProjeto) {
        List<Equipe> equipesAlocadas = new ArrayList<>();
        String sql = "SELECT e.* FROM equipes e " +
                     "JOIN projeto_equipe pe ON e.id_equipe = pe.id_equipe " +
                     "WHERE pe.id_projeto = ?";

        try (Connection conexao = new Conexao().getConexao();
             PreparedStatement stmt = conexao.prepareStatement(sql)) {
            
            stmt.setInt(1, idProjeto);
            try (ResultSet rs = stmt.executeQuery()) {
                while (rs.next()) {
                    Equipe equipe = new Equipe();
                    equipe.setId(rs.getInt("id_equipe"));
                    equipe.setNome(rs.getString("nome_equipe"));
                    equipe.setDescricao(rs.getString("descricao"));
                    equipesAlocadas.add(equipe);
                }
            }
        } catch (SQLException e) {
            System.out.println("Erro ao buscar equipes por projeto: " + e.getMessage());
            e.printStackTrace();
        }
        return equipesAlocadas;
    }

    
    public void atualizarAlocacoes(int idProjeto, List<Equipe> novasEquipes) {
        String sqlDelete = "DELETE FROM projeto_equipe WHERE id_projeto = ?";
        String sqlInsert = "INSERT INTO projeto_equipe (id_projeto, id_equipe) VALUES (?, ?)";

        Connection conexao = null;
        try {
            conexao = new Conexao().getConexao();
            conexao.setAutoCommit(false);

            try (PreparedStatement stmtDelete = conexao.prepareStatement(sqlDelete)) {
                stmtDelete.setInt(1, idProjeto);
                stmtDelete.executeUpdate();
            }

            try (PreparedStatement stmtInsert = conexao.prepareStatement(sqlInsert)) {
                for (Equipe equipe : novasEquipes) {
                    stmtInsert.setInt(1, idProjeto);
                    stmtInsert.setInt(2, equipe.getId());
                    stmtInsert.executeUpdate();
                }
            }

            conexao.commit();
            System.out.println("Alocações atualizadas com sucesso!");

        } catch (SQLException e) {
            System.out.println("Erro ao atualizar alocações: " + e.getMessage());
            try {
                if (conexao != null) conexao.rollback(); // Desfaz em caso de erro
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        } finally {
            try {
                if (conexao != null) {
                    conexao.setAutoCommit(true); // Reativa o autocommit
                    conexao.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
}